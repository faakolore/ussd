<?php

namespace Faakolore\USSD\Test;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Mockery;
use Mockery\LegacyMockInterface;
use Mockery\MockInterface;
use Tests\TestCase;
use Faakolore\USSD\Http\Request;
use Faakolore\USSD\Http\TruRoute\TruRouteRequest;
use Faakolore\USSD\Screen;

class ScreenTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    /**
     * @var LegacyMockInterface|MockInterface|Request
     */
    private $request;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mockRequest();
    }

    public function testRender()
    {
        app()->instance(TruRouteRequest::class, $this->mockRequest());

        $screen = Screen::getInstance(new Request());

        $this->assertNotNull($screen->getResponseMessage());
    }


//    public function testOutOfRange()
//    {
//
//    }
//
//    public function testHasPayload()
//    {
//
//    }
//
//    public function testHandle()
//    {
//
//    }
//
//    public function testGetItemAt()
//    {
//
//    }
//
//    public function testPrevious()
//    {
//
//    }
//
//    public function testWithinRange()
//    {
//
//    }
    protected function mockRequest(): TruRouteRequest
    {
        $request = Mockery::mock(TruRouteRequest::class);
        $request->shouldReceive([
            'getMsisdn' => $this->faker->numerify('26588#######'),
            'getType' => Request::INITIAL,
            'getSession' => $this->faker->numerify('##########'),
            'getMessage' => 1,
        ]);
        return $request;
    }
}
